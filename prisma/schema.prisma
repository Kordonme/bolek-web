// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id    String                 @id @default(cuid())
  name  String
  users UsersOnOrganizations[]
  homes Home[]
}

model UsersOnOrganizations {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime     @default(now())

  @@id([organizationId, userId])
}

model User {
  id            String                 @id @default(cuid())
  email         String                 @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  phone         String?
  accounts      Account[]
  sessions      Session[]
  organizations UsersOnOrganizations[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Homeowner {
  id        String   @id @default(cuid())
  home      Home     @relation(fields: [homeId], references: [id])
  homeId    String
  createdAt DateTime @default(now())
  state     String
}

model Home {
  id             String       @id @default(cuid())
  streetName     String
  streetNumber   String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  homeowners     Homeowner[]
}
